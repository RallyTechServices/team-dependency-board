<!DOCTYPE html>
<html>
<head>
    <title>Team Dependency Board</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Apr 07 2015 14:43:18 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Apr 07 2015 14:43:18 GMT-0700 (PDT)";
        var CHECKSUM = 26005233104;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Rally.ui.cardboard.CardBoard,{

    _buildColumnsFromModel: function() {
        var me = this;
        var model = this.models[0];
        if (model) {
            if ( this.attribute === "Iteration" ) {
                var retrievedColumns = [];
                retrievedColumns.push({

                    value: null,
                    columnHeaderConfig: {
                        headerTpl: "{name}",
                        headerData: {
                            name: "Backlog"
                        }
                    }
                });

                this._getLocalIterations(retrievedColumns);
            }
        }
    },
    _getLocalIterations: function(retrievedColumns) {
        var me = this;

        //var start_date = this.startIteration.get('formattedStartDate');
        //var filters = [{property:'StartDate',operator:'>=',value:start_date}];

        var iteration_names = [];

        Ext.create('Rally.data.WsapiDataStore',{
            model:me.attribute,
            autoLoad: true,
            //filters: filters,
            context: { projectScopeUp: false, projectScopeDown: false },
            sorters: [
                {
                    property: 'EndDate',
                    direction: 'ASC'
                }
            ],
            fetch: ['Name','EndDate','StartDate','PlannedVelocity'],
            listeners: {
                load: function(store,records) {
                    Ext.Array.each(records, function(record){
                        iteration_names.push(record.get('Name'));

                        retrievedColumns.push({
                            value: record,

                            columnHeaderConfig: {
                                headerTpl: "{name}",
                                headerData: {
                                    name: record.get('Name')
                                }
                            }
                        });
                    });
                    this._getAllIterations(retrievedColumns,iteration_names);
                },
                scope: this
            }
        });
    },
    _getAllIterations: function(retrievedColumns,iteration_names) {
        var me = this;

        var today_iso = Rally.util.DateTime.toIsoString(new Date(),false);
        var filters = [{property:'EndDate',operator:'>',value:today_iso}];

        Ext.create('Rally.data.WsapiDataStore',{
            model:me.attribute,
            autoLoad: true,
            filters: filters,
            sorters: [
                {
                    property: 'EndDate',
                    direction: 'ASC'
                }
            ],
            fetch: ['Name','Project','PlannedVelocity','Children','Parent', 'ObjectID'],
            listeners: {
                load: function(store,records) {
                    var current_project = null;
                    if ( this.context ) {
                        current_project = this.context.getProject();
                    }
                    this.fireEvent('columnsretrieved',this,retrievedColumns);
                    this.columnDefinitions = [];
                    _.map(retrievedColumns,this.addColumn,this);
                    this._renderColumns();
                },
                scope: this
            }
        });
    }
});

Ext.override(Rally.ui.cardboard.Column,{
    getStoreFilter: function(model) {
        var property = this.attribute;
        var value = this.getValue();
        if ( this.attribute == "Iteration" ) {
            property = "Iteration.Name";
            if ( value ) {
                value = value.get('Name');
            }
        }
        return {
            property:property,
            operator: '=',
            value: value
        };
    },
    isMatchingRecord: function(record) {
        var recordValue = record.get(this.attribute);
        if (recordValue) {
            recordValue = recordValue.Name;
        }
        var columnValue = this.getValue();
        if ( columnValue ) {
            columnValue = columnValue.get('Name');
        }

        return (columnValue === recordValue );
    },
    addCard: function(card, index, highlight) {
        var record = card.getRecord();
        var target_value = this.getValue();

        if ( target_value && typeof(target_value.get) === "function" ) {
            target_value = this.getValue().get('_ref');
        }

        record.set(this.attribute,target_value);

        if (!Ext.isNumber(index)) {
            //find where it should go
            var records = Ext.clone(this.getRecords());
            records.push(record);
            this._sortRecords(records);

            var recordIndex = 0;
            for (var iIndex = 0, l = records.length; iIndex < l; iIndex++) {
                var i = records[iIndex];
                if (i.get("ObjectID") === record.get("ObjectID")) {
                    recordIndex = iIndex;
                    break;
                }
            }
            index = recordIndex;
        }

        this._renderCard(card, index);

        if (highlight) {
            card.highlight();
        }

        this.fireEvent('addcard');
        card.fireEvent('ready', card);
    },
    _sortRecords: function(records) {
        var sortProperty = this._getSortProperty(),
            sortAscending = true,   //this._getSortDirection() === 'ASC',
            valA, valB;

        // force to new rank style
        sortProperty = "DragAndDropRank";

        records.sort(function(a, b) {
            valA = a.get(sortProperty);
            if (valA && valA._refObjectName) {
                valA = valA._refObjectName;
            }
            valB = b.get(sortProperty);
            if (valB && valB._refObjectName) {
                valB = valB._refObjectName;
            }

            if (valA === valB) {
                return 0;
            }

            if (valA !== null && valA !== undefined) {
                if (valB === null || valB === undefined) {
                    return sortAscending ? -1 : 1;
                } else {
                    return valA > valB ? (sortAscending ? 1 : -1) : (sortAscending ? -1 : 1);
                }
            } else if (valB !== null && valB !== undefined) {
                if (valA === null || valA === undefined) {
                    return sortAscending ? 1 : -1;
                } else {
                    return valB > valA ? (sortAscending ? -1 : 1) : (sortAscending ? 1 : -1);
                }
            }

            //Default case (dates, objects, etc.)
            return sortAscending ? valA - valB : valB - valA;
        });
    }
});

Ext.define('Rally.ui.cardboard.plugin.CardContentLeft', {
    alias: 'plugin.rallycardcontentleft',
    extend: 'Ext.AbstractPlugin',
    requires: [
        'Rally.ui.cardboard.CardRendererFactory',
        'Ext.XTemplate',
        'Rally.ui.renderer.template.FormattedIDTemplate'
    ],

    mixins: {
        observable: 'Ext.util.Observable'
    },

    /**
     * @private
     * Fields that are NOT children of the rui-card-content div.
     */
    nonDisplayableFields: ['PlanEstimate', 'FormattedID', 'Owner', 'PreliminaryEstimate', 'Estimate'],

    footerFields: ['PercentDoneByStoryPlanEstimate', 'PercentDoneByStoryCount', 'UserStories', 'PredecessorsAndSuccessors', 'Milestones'],

    statics: {
        getIdTpl: function() {
            if (!this.idTpl) {
                this.idTpl = Ext.create('Rally.ui.renderer.template.FormattedIDTemplate');
            }

            return this.idTpl;
        },

        getHeaderTpl: function() {
            if (!this.headerTpl) {
                this.headerTpl = Ext.create('Ext.XTemplate', [
                    '<div class="left-header">',
                    '<div class="id" style="min-width: {idWidth}px">{formattedId}</div>',
                    '<tpl if="owner"><div class="owner-name">{owner}</div></tpl>',
                    '</div>']);
            }

            return this.headerTpl;
        }
    },

    constructor: function(config) {
        this.addEvents(
            /**
             * @event fieldclick
             * Fires when a field displayed on the content portion of the card is clicked.
             *
             * @param {String} fieldName The name of the field that was clicked
             * @param {Rally.ui.cardboard.Card} card The card whose field was clicked
             */
            'fieldclick'
        );
        this.callParent(arguments);
        this.mixins.observable.constructor.call(this);
    },

    init: function(card) {
        this.callParent(arguments);
        this.card = card;
        card.contentLeftPlugin = this;
        card.on('afterrender', this._onAfterRender, this);
        card.on('rerender', this._onAfterRender, this);
        card.on('beforedestroy', this._onBeforeDestroy, this);

        card.relayEvents(this, [
        /**
         * @event fieldclick
         * Forwarded event from Rally.ui.cardboard.plugin.CardContent#fieldclick
         * @member Rally.ui.cardboard.Card
         * @inheritdoc Rally.ui.cardboard.plugin.CardContent#fieldclick
         */
            'fieldclick'
        ]);
    },

    destroy: function() {
        if (this.card) {
            this.detachListeners();
            delete this.card.contentLeftPlugin;
            delete this.card;
        }

        this.callParent(arguments);
    },

    detachListeners: function() {
        if (this.card && this.card.getEl()) {
            this.card.getEl().down('.rui-card-content').un('click', this._onClick, this);
        }
    },

    getDisplayedFields: function() {
        return this.card.getFieldNames();
    },

    getHtml: function() {
        var contentHtml = [],
            statusHtml = [];

        _.each(
            _.filter(
                this.card.getFieldDefinitions(),
                function(fieldDefinition) {
                    return this._isDisplayableField(fieldDefinition.name) && !this._isFieldHandledByPlugin(fieldDefinition.name);
                },
                this
            ),
            function(fieldDefinition) {
                var fieldHtml = this._getFieldHtml(fieldDefinition);
                if (fieldHtml) {
                    if (this._isStatusField(fieldDefinition)) {
                        statusHtml.push(fieldHtml);
                    } else {
                        contentHtml.push(fieldHtml);
                    }
                }
            },
            this
        );

        var result = [];
        result.push('<td class="rui-card-content">');
        result.push(this.getCardHeader());
        result.push(contentHtml.join('\n'));
        result.push(this.getCardFooter());

        if (this._isFieldHandledByPlugin('BlockedReason')) {
            result.push(this._getBlockedReasonContent());
        }
        result.push('<div class="status-content">');
        result.push(statusHtml.join('\n'));
        result.push('</div></td>');

        return result.join('\n');
    },

    _isFieldHandledByPlugin: function(fieldName){
        return fieldName === 'BlockedReason' && this.card.blockedReasonPlugin && !this.card.blockedReasonPlugin.isBlockedOrBlockedReasonHidden();
    },

    _isDisplayableField: function(fieldName){
        return !_.contains(this.nonDisplayableFields.concat(this.footerFields), fieldName);
    },

    _isStatusField: function(fieldDefinition) {
        if (fieldDefinition.hasOwnProperty('isStatus')) {
            return fieldDefinition.isStatus;
        }

        return Rally.ui.cardboard.CardRendererFactory.isStatusField(fieldDefinition);
    },

    addField: function(fieldDefinition) {
        var fieldHtml = this._getFieldHtml(fieldDefinition);
        if (fieldHtml) {
            if (this._isStatusField(fieldDefinition)) {
                this._getStatusContent().createChild(fieldHtml);
            } else {
                this._getCardContent().createChild(fieldHtml, this._getStatusContent());
            }
        }
    },

    getFieldEl: function(fieldName) {
        return this.card.getEl().down('.field-content.' + fieldName);
    },

    refreshField: function(fieldName) {
        if(!_.contains(this.nonDisplayableFields, fieldName)) {
            var el = this.getFieldEl(fieldName),
                tpl = this._getRenderTpl({name: fieldName});
            if (el && tpl) {
                el.update(tpl.apply(this.card.getRecord().getData()));
            }
        }
    },
    /**
     * override to show giver
     */
    _getRenderTpl: function(fieldDefinition) {
        var card = this.card,
            modelField = card.getRecord().getField(fieldDefinition.name),
            hasData = (Ext.isFunction(fieldDefinition.hasValue) && fieldDefinition.hasValue()) || card.getRecord().hasValue(modelField),
            isRenderable = hasData || (modelField && modelField.isCollection());


        if (modelField && modelField.isHidden) {
            return null;
        }

        if (!isRenderable) {
            return null;
        }

        //Override for giver
        if (fieldDefinition.name == 'Tags'){
            return Ext.create('Rally.technicalservices.renderer.template.FilteredPillTemplate',{
                collectionName: 'Tags',
                cls: 'rui-tag-list-item',
                filterBy: '^Give:',
                filterByFlag: "i"
            });
        }

        if (!fieldDefinition.renderTpl && modelField) {
            return Rally.ui.cardboard.CardRendererFactory.getRenderTemplate(modelField);
        }

        return fieldDefinition.renderTpl;
    },

    _getFieldHtml: function(fieldDefinition) {
        var html = '',
            cls = '',
            typeCls = '',
            tpl = this._getRenderTpl(fieldDefinition);

        if (tpl) {
            html = tpl.apply(this.card.getRecord().data);

            if (html) {
                cls = this._isStatusField(fieldDefinition) ? 'status-field ' : '';

                var field = this.card.getRecord().self.getField(fieldDefinition.name);
                if (field && field.attributeDefinition) {
                    typeCls = ' type-' + field.attributeDefinition.AttributeType.toLowerCase();
                }
                html = '<div class="field-content ' + cls + fieldDefinition.name + typeCls + '">' + html + '</div>';
            }
        }

        return html;
    },

    _getCardContent: function() {
        return this.card.getEl().down('.rui-card-content');
    },

    _getStatusContent: function() {
        return this._getCardContent().down('.status-content');
    },

    _getBlockedReasonContent: function() {
        return this.card.blockedReasonPlugin ? this.card.blockedReasonPlugin.getHtml() : '';
    },

    getCardHeader: function() {
        var record = this.card.getRecord(),
            formattedId = record.get('FormattedID'),
            data = {};

        if (formattedId) {
            data.idWidth = 20 + (formattedId.length * 8);
            data.formattedId = this.self.getIdTpl().apply(record.data);
            data.owner = record.get('Owner') ? record.get('Owner')._refObjectName : null;

            return this.self.getHeaderTpl().apply(data);
        }

        return '';
    },

    getCardFooter: function() {
        var footerHtml = _.reduce(this.footerFields, function (html, fieldName) {
            var fieldDefinition = _.find(this.card.getFieldDefinitions(), function (fieldDefinition) {
                return fieldDefinition.name === fieldName;
            });

            return fieldDefinition ? html + this._getFieldHtml(fieldDefinition) + '\n' : html;
        }, '', this);

        if (footerHtml.length) {
            return '<div class="card-footer">' + footerHtml + '</div>';
        }

        return '';
    },

    _onAfterRender: function() {
        this._getCardContent().on('click', this._onClick, this);
        if(this.card.getEl().down('.formatted-id-template')){
            this.card.getEl().down('.formatted-id-template').on('mouseenter', this.card.popoverPlugin.showDescription, this.card.popoverPlugin);
        }
    },

    _onBeforeDestroy: function() {
        if (this.card && this.card.getEl() && this.card.getEl().down('.id')){
            this.card.getEl().down('.formatted-id-template').un('mouseenter', this.card.popoverPlugin.showDescription, this.card.popoverPlugin);
        }
    },

    _onClick: function(e) {
        var target = e.getTarget('.field-content', this._getCardContent(), false);
        if (!target) {
            return;
        }

        var fieldName = _.find(target.className.split(' '), function(className) {
            return !_.contains(['field-content', 'status-field'], className);
        });
        if (Ext.isDefined(fieldName)) {
            this._onFieldClick(fieldName.replace(/Summary$/, ''), e, target);
        }
    },

    _onFieldClick: function(fieldName) {
        this.fireEvent('fieldclick', fieldName, this.card);
    }
});


Ext.define('Rally.technicalservices.window.PrintCards',{    extend: 'Ext.Window',
    logger: new Rally.technicalservices.Logger(),
    truncateText: '...',
    config: {
        title: 'print...',
        records: null,
        styleSheetTitle: "printCards",
        /**
         *  Array of the following:
         *  dataIndex
         *  maxLength (default 0)
         *  cls (defaults are: card-title, content,
         */
        displayFields: null
    },
    constructor: function(config){
        this.initConfig(config);
    },
    show: function(){
        var options = "toolbar=1,menubar=1,scrollbars=yes,scrolling=yes,resizable=yes,width=1000,height=500";
        var win = window.open('',this.title);

        var html = this._buildCardsHTML();
        console.log(html);
        win.document.write('<html><head><title>' + this.title + '</title>');
        win.document.write('<style>');
        win.document.write(this._getStyleSheet(this.styleSheetTitle));
        win.document.write('</style>');
        win.document.write('</head><body class="landscape">');
        win.document.write(html);
        win.document.write('</body></html>');

        win.document.close();

        win.print();
        win.close();
    },
    _buildCardsHTML: function() {

        var html = '';
        var total_cards = this.records.length;
        var card_num = 0;

        Ext.each(this.records, function(record){

            var value_html = '';
            //Todo organize by content or header...
            Ext.each(this.displayFields, function(df){
                var value = record.get(df.dataIndex);
                if ( df.renderer ) {
                    value = df.renderer(value,null,record);
                }
                df.maxLenth = df.maxLength || 0;
                if (df.maxLength > 0 && value.length > df.maxLength){
                    value = value.substring(0,df.maxLength);
                    value = value + this.truncateText;
                }
                value_html += Ext.String.format('<div class="{0}">{1}</div>',df.cls,value);
            }, this);
            html += Ext.String.format('<div class="artifact">{0}</div>', value_html);

            card_num ++;
            if ((card_num) % 4 === 0) {
                html += '<div class="pb"></div>';
            } else if (card_num === total_cards - 1) {
                html += '<div class="cb">&nbsp;</div>';
            }
        },this);
        return html;
    },
    _getStyleSheet: function(styleSheetTitle) {
        this.logger.log('getStyleSheet');
        var styleSheet;
        var docs = Ext.getDoc();
        var elems = docs.query('style');
        for (var i=0; i< elems.length; i++){
            console.log(elems[i].title, styleSheetTitle);
            if (elems[i].title == styleSheetTitle){
                styleSheet = elems[i];
            }
        }
        if (styleSheet && styleSheet.innerHTML){
            return styleSheet.innerHTML;
        }
        return '';

    }
});

Ext.define('Rally.technicalservices.renderer.template.FilteredPillTemplate', {
        extend: 'Ext.XTemplate',
        requires: [
            'Rally.util.Array',
            'Rally.util.Ref'
        ],
        constructor: function(config) {
            var filterRegex = new RegExp(config.filterBy,config.filterByFlag),
                collectionName = config.collectionName,
                iconCls = config.iconCls,
                cls = config.cls,
                templateConfig = [
                    '{[this.joinNames(values)]}',
                    {
                        joinNames: function(recordData) {
                            var names = recordData[collectionName];
                            if (names._tagsNameArray) {
                                names = names._tagsNameArray ? names._tagsNameArray : names;
                            } else {
                                names = _.map(names, function(obj) {
                                    return {
                                        _ref: obj.get('_ref'),
                                        Name: obj.get('Name')
                                    };
                                });
                            }

                            var filteredNames =  Ext.Array.filter(names, function(a) {
                                var val = a['Name'];

                                if (val && filterRegex.test(val)) {
                                    return true;
                                }
                                return false;
                            });
                            filteredNames = Rally.util.Array.sortByAttribute(filteredNames, 'Name');

                            return _.reduce(filteredNames, function(memo, name) {
                                var colorAttr = name.DisplayColor ? ' style="color: ' + name.DisplayColor + ';"' : '';
                                return memo += '<span class="' + cls + '"><span class="' + iconCls + '"' + colorAttr + '></span>'+ name.Name +'</span>';
                            }, '');
                        }
                    },
                    config
                ];

            return this.callParent(templateConfig);
        }
    }
);
Ext.define("team-dependency-board", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'criteria_box', layout: {type: 'hbox'}},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    dependencyTag: 'Dependency',
    /**
     * controls
     */
    cbRelease: null,

    launch: function() {
        this._initApp();
    },
     _initApp: function(){
        this.cbRelease= this.down('#criteria_box').add({
            xtype: 'rallyreleasecombobox',
            listeners: {
                scope: this,
                select: this._releaseSelected,
                ready: this._releaseSelected
            }
        });
         this.down('#criteria_box').add({
             xtype: 'rallybutton',
             text: 'Print Cards',
             listeners: {
                 scope: this,
                 click: this._print
             }
         });
    },
    _openPrintWindow:function(store, records, success){
        var giverPattern = new RegExp('^Give:',"i");
        var fields =[{
            dataIndex: 'FormattedID',
            cls: 'cardUpperLeft'
        },
            {
                dataIndex: 'Iteration',
                cls: 'cardUpperRight',
                renderer: function(value,meta_data,record){
                    var iteration = record.get('Iteration');
                    var iteration_name = "Unscheduled";
                    if ( iteration ) {
                        iteration_name = iteration.Name;
                    }

                    return iteration_name;
                }
            },
            {
                dataIndex: 'Project',
                cls: 'cardLowerLeft',
                renderer: function(value,meta_data,record){
                    var project = record.get('Project');
                    var project_name = "";
                    if (project){
                        project_name = project.Name;
                    }
                    var tags = record.get('Tags');
                    var giver = "";
                    if (tags && tags._tagsNameArray){

                        Ext.each(tags._tagsNameArray, function(tag){
                            console.log('test',giverPattern, tag);
                            if (giverPattern.test(tag.Name)){
                                giver += tag.Name + "<br/>";
                            }
                        });
                    }
                    if (giver.length == 0){
                        giver = "Give: (Not tagged)<br/>";
                    }
                    return Ext.String.format("{0}Get: {1}",giver, project_name);
                }
            },
            {
                dataIndex: 'Name',
                maxLength: 100,
                cls: 'cardTitle'
            }];

        var win = Ext.create('Rally.technicalservices.window.PrintCards',{
            records: records,
            displayFields: fields,
            currentDocument: Ext.getDoc()
        });
        win.show();

    },
    _print: function(){
        var releaseName = this.cbRelease.getRecord().get(this.cbRelease.displayField);
        Ext.create('Rally.data.wsapi.Store',{
            fetch: ['FormattedID','Iteration','Project','Name','Tags'],
            model: 'HierarchicalRequirement',
            filters:  [{
                property: 'Release.Name',
                value: releaseName
            },{
                property: 'Tags.Name',
                operator: 'contains',
                value: this.dependencyTag
            }],
            autoLoad: true,
            listeners: {
                scope: this,
                load: this._openPrintWindow
            }
        });



    },
    _releaseSelected: function(cb){
        var releaseName = cb.getRecord().get(cb.displayField);
        this._updateCardboard(releaseName);
    },
    _updateCardboard: function(releaseName){
        this.logger.log('_updateCardboard for release ', releaseName);

        if (this.down('#rally-board')){
            this.down('#rally-board').destroy();
        }

        this.down('#display_box').add({
            itemId: 'rally-board',
            xtype: 'rallycardboard',
            attribute: 'Iteration',
            context: this.getContext(),
            rowConfig: {
                field: 'Project'
            },
            cardConfig: {
                fields: ['Name','Tags']
            },
            storeConfig: {
                filters:  [{
                    property: 'Release.Name',
                    value: releaseName
                },{
                    property: 'Tags.Name',
                    operator: 'contains',
                    value: this.dependencyTag
                }]
            }
        });
    }

});

            
               Rally.launchApp('team-dependency-board', {
                   name: 'Team Dependency Board'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}


<style type="text/css" title="printCards">
/* PLEASE LEAVE THIS STYLESHEET INLINE SINCE TITLE IS NECESSARY */
@media print {
    #interface {
        display: none;
    }

    .pb {
        page-break-after: always;
        clear: both;
    }
}

.pb {
    page-break-after: always;
    clear: both;
}
#buttonDiv,
#iterationDropdown {
    display: inline;
}

#interface, #printSection {
    margin: 20px;
}

html {
    background-color: #fff;
    color: #000;
    font: 14pt / 1.26 Arial, Helvetica, sans-serif;
    margin: 0;
    padding: 0;
}

body {
    background-color: #fff;
    margin: 0;
    padding: 0;
}

.cb {
    clear: both;
}

.artifact {
    background-color: #fff;
    border: 2px solid #000;
    float: left;
    height: 3.2in;
    margin: 0.1in 0.1in 0.1in 0.1in;
    position: relative;
    overflow: hidden;
    width: 4.3in;
}

.header {
    border: 1px;
    border-bottom-style: solid;
    display: table-cell;
    height: 40px;
    vertical-align: middle;
    width: 4.3in;
}

.cardTitle {
    font: bold 24px Genova, sans-serif;
    padding-top: 3em;
    text-align: center;
}

.description {
    float: left;
    font: 12pt Georgia, sans-serif;
    margin: 15em auto 0 auto;
    padding-left: 1.0em;
    padding-right: 1.0em;
    overflow-y: hidden;
    width: 100%;
    word-wrap: break-word;
}

.cardUpperRight {
    text-align: right;
    font: bold 20px Arial, Helvetica, sans-serif;
    top: 0.5em;
    right: 0.5em;
    position: absolute;
}

.cardUpperInnerLeft {
    text-align: center;
    font: bold 20px Arial, Helvetica, sans-serif;
    top: 0.5em;
    left: 4.0em;
    width: 6.0em;
    position: absolute;
}
.cardUpperInnerRight {
    text-align: center;
    font: bold 20px Arial, Helvetica, sans-serif;
    top: 0.5em;
    right: 4.0em;
    width: 6.0em;
    position: absolute;
}
.cardUpperLeft {
    position: absolute;
    font: bold 20px Arial, Helvetica, sans-serif;
    top: 0.5em;
    left: 0.5em;
}

.cardLowerLeft {
    bottom: 0.5em;
    left: 0.5em;
    position: absolute;
}

.cardLowerRight {
    bottom: 0.5em;
    position: absolute;
    right: 0.5em;
}

.cardUpperCenter {
    font: bold 20px Arial, Helvetica, sans-serif;
    text-align: center;
    top: 0.5em;
    position: absolute;
    right: 0.5in;
    display: inline;
    width: 3in;
}

.content {
    height: 2.4in;
    overflow: hidden;
    width: 4.3in;
}

</style>
    </style>
    <style type="text/css" title="printCards">
        /* PLEASE LEAVE THIS STYLESHEET INLINE SINCE TITLE IS NECESSARY */
        @media print {
            #interface {
                display: none;
            }

            .pb {
                page-break-after: always;
                clear: both;
            }
        }

        .pb {
            page-break-after: always;
            clear: both;
        }
        #buttonDiv,
        #iterationDropdown {
            display: inline;
        }

        #interface, #printSection {
            margin: 20px;
        }

        html {
            background-color: #fff;
            color: #000;
            font: 14pt / 1.26 Arial, Helvetica, sans-serif;
            margin: 0;
            padding: 0;
        }

        body {
            background-color: #fff;
            margin: 0;
            padding: 0;
        }

        .cb {
            clear: both;
        }

        .artifact {
            background-color: #fff;
            border: 2px solid #000;
            float: left;
            height: 3.2in;
            margin: 0.1in 0.1in 0.1in 0.1in;
            position: relative;
            overflow: hidden;
            width: 4.3in;
        }

        .header {
            border: 1px;
            border-bottom-style: solid;
            display: table-cell;
            height: 40px;
            vertical-align: middle;
            width: 4.3in;
        }

        .cardTitle {
            font: bold 24px Genova, sans-serif;
            padding-top: 3em;
            text-align: center;
        }

        .description {
            float: left;
            font: 12pt Georgia, sans-serif;
            margin: 15em auto 0 auto;
            padding-left: 1.0em;
            padding-right: 1.0em;
            overflow-y: hidden;
            width: 100%;
            word-wrap: break-word;
        }

        .cardUpperRight {
            text-align: right;
            font: bold 20px Arial, Helvetica, sans-serif;
            top: 0.5em;
            right: 0.5em;
            position: absolute;
        }

        .cardUpperInnerLeft {
            text-align: center;
            font: bold 20px Arial, Helvetica, sans-serif;
            top: 0.5em;
            left: 4.0em;
            width: 6.0em;
            position: absolute;
        }
        .cardUpperInnerRight {
            text-align: center;
            font: bold 20px Arial, Helvetica, sans-serif;
            top: 0.5em;
            right: 4.0em;
            width: 6.0em;
            position: absolute;
        }
        .cardUpperLeft {
            position: absolute;
            font: bold 20px Arial, Helvetica, sans-serif;
            top: 0.5em;
            left: 0.5em;
        }

        .cardLowerLeft {
            bottom: 0.5em;
            left: 0.5em;
            position: absolute;
        }

        .cardLowerRight {
            bottom: 0.5em;
            position: absolute;
            right: 0.5em;
        }

        .cardUpperCenter {
            font: bold 20px Arial, Helvetica, sans-serif;
            text-align: center;
            top: 0.5em;
            position: absolute;
            right: 0.5in;
            display: inline;
            width: 3in;
        }

        .content {
            height: 2.4in;
            overflow: hidden;
            width: 4.3in;
        }

    </style>
</head>
<body></body>
</html>